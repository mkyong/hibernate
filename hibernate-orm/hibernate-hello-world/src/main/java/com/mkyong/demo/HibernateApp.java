package com.mkyong.demo;

import com.mkyong.demo.entity.Comment;
import com.mkyong.demo.entity.User;
import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

import java.time.LocalDateTime;

//https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html
public class HibernateApp {

    public static void main(String[] args) {

        System.out.println("Hibernate Hello World");

        User user = new User();

        // Generated by Hibernate
        //user.setId();
        user.setName("Mkyong");
        user.setEmail("abc@gmail.com");
        insertUser(user);

        Comment comment1 = new Comment();
        comment1.setText("this is comment 1");
        comment1.setCreatedDate(LocalDateTime.now());
        comment1.setCreatedBy(user);
        insertComment(comment1);

        Comment comment2 = new Comment();
        comment2.setText("this is comment 2");
        comment2.setCreatedDate(LocalDateTime.now());
        comment2.setCreatedBy(user);
        insertComment(comment2);

        //List<Comment> comments = Arrays.asList(comment1, comment2);

        user = getUser(user.getId());
        System.out.println(user.toString());
        System.out.println(user.getComments());


    }

    private static User getUser(int id) {
        Session session = openSession();

        User user = (User) session.get(User.class, id);

        Hibernate.initialize(user.getComments());

        session.close();

        return user;
    }

    private static void insertUser(User user) {
        Session session = openSession();
        session.getTransaction().begin();
        session.persist(user);
        session.getTransaction().commit();
    }

    private static void insertComment(Comment comment) {
        Session session = openSession();
        session.getTransaction().begin();
        session.persist(comment);
        session.getTransaction().commit();
    }

    private static SessionFactory sessionFactory = null;

    private static Session openSession() {
        if (sessionFactory == null) {
            final Configuration configuration = new Configuration();
            configuration.addAnnotatedClass(User.class);
            configuration.addAnnotatedClass(Comment.class);

            sessionFactory = configuration.buildSessionFactory(new StandardServiceRegistryBuilder().build());
        }
        return sessionFactory.openSession();
    }

}
